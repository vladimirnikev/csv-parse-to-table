{"version":3,"sources":["reducer.js","components/Button.jsx","components/ErrorMessage.jsx","components/Table.jsx","validate.js","App.js","reportWebVitals.js","index.js"],"names":["Context","React","createContext","initialState","isRequiredParams","data","appReducer","state","action","type","dataArray","slice","correctPhoneNumber","number","Number","length","correctHasChildrenBoolean","value","toLowerCase","every","e","dataArrayWithCorrectValues","map","currentIndex","arr","el","i","duplicateId","Math","round","id","Button","useContext","dispatch","style","margin","onChange","file","target","files","reader","FileReader","readAsText","onload","d3","result","ErrorMessage","border","padding","display","justifyContent","maxWidth","backgroundColor","Table","columns","dataField","text","cell","age","isInteger","row","experience","experienceNum","ageNum","validateExperience","test","todayDate","Date","validateExpirationDate","marginTop","keyField","App","useReducer","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.92e5017b.chunk.js","sourcesContent":["import { index } from 'd3-array'\nimport React from 'react'\n\nexport const Context = React.createContext()\n\nexport const initialState = {\n    isRequiredParams: true,\n    data: [],\n}\n\nexport const appReducer = (state, action) => {\n    switch (action.type) {\n\n        case 'UPLOAD_NEW_DATA':\n            let dataArray = action.data.slice()\n\n            let correctPhoneNumber = (number) => {\n                // console.log((/\\d/).test(number))\n                if (Number(number) && number.length >= 10 && number.length <= 12) {\n                    // (/\\d/).test(number)\n                    if (number.length === 10) {\n                        return number = `+1${number}`\n                    } else if (number.length === 11 && number[0] === '1') {\n                        return number = `+${number}`\n                    } else if (number.length === 12 && number[0] === '+' && number[1] === '1') {\n                        return number\n                    }\n                    return number\n                } else {\n                    return number\n                }\n            }\n\n            let correctYearlyIncomeValue = (value) => {\n                return value = Number(value) ? Math.round(value * 100) / 100 : value\n            }\n\n            let correctHasChildrenBoolean = (value) => {\n                value = value.toLowerCase()\n                switch (value) {\n                    case 'true':\n                        return true\n                    case 'false':\n                        return false\n                    case '':\n                        return false\n                    default:\n                        return value\n                }\n            }\n\n            let isRequiredParams = dataArray.every(e =>\n                e['Full Name'].length\n                && e['Phone'].length\n                && e['Email'].length\n                !== 0)\n\n            let dataArrayWithCorrectValues = dataArray.map((e, currentIndex, arr) => {\n                let el = e;\n\n                // Logic for \"Duplicate ID\"\n                for (let i = 0; i < arr.length; i++) {\n\n                    if (typeof el.duplicateId === 'number') break;\n\n                    el = {\n                        ...e,\n                        duplicateId: i !== currentIndex &&\n                            ((correctPhoneNumber(e['Phone']) === correctPhoneNumber(arr[i]['Phone']))\n                                || (e['Email'].toLowerCase() === arr[i]['Email'].toLowerCase()))\n                            ? i + 1\n                            : null\n                    }\n                }\n\n                return {\n                    ...el,\n                    'Phone': correctPhoneNumber(el['Phone']),\n                    'Yearly Income': correctYearlyIncomeValue(el['Yearly Income']),\n                    'Has children': correctHasChildrenBoolean(el['Has children'])\n                }\n\n            })\n\n            return {\n                ...state,\n                data: dataArrayWithCorrectValues\n                    .map((e, i) => ({ id: i + 1, ...e })),\n                isRequiredParams: isRequiredParams\n            }\n        default:\n            return state\n    }\n}","import React, { useContext } from 'react'\nimport * as d3 from 'd3'\nimport { Context } from '../reducer'\n\nconst Button = () => {\n\n    const { state, dispatch } = useContext(Context)\n\n    let action = (e) => {\n        let file = e.target.files[0]\n        let reader = new FileReader();\n\n        file && reader.readAsText(file)\n\n        reader.onload = () => {\n            dispatch({ type: 'UPLOAD_NEW_DATA', data: d3.csvParse(reader.result) })\n        }\n    }\n\n    return (\n        <input\n            style={{\n                margin: '20px 0 0 20px',\n            }}\n            type='file'\n            onChange={action}\n        />\n    )\n}\n\nexport default Button\n\n","import React from 'react'\n\nconst ErrorMessage = () => {\n    return <div style={{\n        border: '2px solid red',\n        padding: '40px',\n        display: 'flex',\n        justifyContent: 'center',\n        maxWidth: '50%',\n        margin: 'auto',\n        backgroundColor: '#ffbaba'\n    }}>\n        <span>File format is not correct</span>\n    </div>\n}\n\nexport default ErrorMessage","import React from 'react'\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport { validateAge, validateExperience, validateExpirationDate, validateHasChildren, validateLicenseNumber, validateYearlyIncome } from '../validate';\nimport ErrorMessage from './ErrorMessage';\n\n\n\nconst Table = ({ data, isRequiredParams }) => {\n    const columns = [\n        {\n            dataField: 'id',\n            text: 'ID'\n        },\n        {\n            dataField: 'Full Name',\n            text: 'Full Name',\n        },\n        {\n            dataField: 'Phone',\n            text: 'Phone'\n        },\n        {\n            dataField: 'Email',\n            text: 'Email'\n        },\n        {\n            dataField: 'Age',\n            text: 'Age',\n            style: (cell) => {\n                if (!validateAge(cell)) {\n                    return { backgroundColor: '#ffbaba' }\n                }\n            }\n        },\n        {\n            dataField: 'Experience',\n            text: 'Experience',\n            style: (cell, row) => {\n                if (!validateExperience(cell, row['Age'])) {\n                    return { backgroundColor: '#ffbaba' }\n                }\n            }\n        },\n        {\n            dataField: 'Yearly Income',\n            text: 'Yearly Income',\n            style: (cell) => {\n                if (!validateYearlyIncome(cell)) {\n                    return { backgroundColor: '#ffbaba' }\n                }\n            }\n        },\n        {\n            dataField: 'Has children',\n            text: 'Has children',\n            style: (cell) => {\n                if (!validateHasChildren(cell)) {\n                    return { backgroundColor: '#ffbaba' }\n                }\n            }\n        },\n        {\n            dataField: 'License states',\n            text: 'License states'\n        },\n        {\n            dataField: 'Expiration date',\n            text: 'Expiration date',\n            style: (cell) => {\n                if (!validateExpirationDate(cell)) {\n                    return { backgroundColor: '#ffbaba' }\n                }\n            }\n        },\n        {\n            dataField: 'License number',\n            text: 'License number',\n            style: (cell) => {\n                if (!validateLicenseNumber(cell)) {\n                    return { backgroundColor: '#ffbaba' }\n                }\n            }\n        },\n        {\n            dataField: 'duplicateId',\n            text: 'Duplicate with'\n        }\n    ]\n\n    return (\n        <div style={{ marginTop: '20px' }}>\n            {isRequiredParams ? <BootstrapTable data={data} keyField='id' columns={columns} /> : <ErrorMessage />}\n        </div>\n    )\n}\n\nexport default Table","\nexport const validateAge = (age) => {\n    return (Number.isInteger(Number(age)) && age > 21) || age === ''\n}\n\nexport const validateExperience = (experience, age) => {\n\n    let experienceNum = Number(experience)\n    let ageNum = Number(age)\n\n    return (experienceNum >= 0 && experienceNum < ageNum) || experience === ''\n}\n\nexport const validateYearlyIncome = (value) => {\n\n    return (Number(value) && value > 0) || value === ''\n}\n\nexport const validateExpirationDate = (value) => {\n\n    let regDateA = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}$/\n    let regDateB = /^[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}$/\n\n    if (value === '') return true\n\n    if (!regDateA.test(value) && !regDateB.test(value)) {\n\n        return false\n    } else {\n        let todayDate = new Date()\n        let valueDate = new Date(value)\n\n        return +valueDate >= +todayDate\n    }\n}\n\nexport const validateHasChildren = (value) => {\n    return typeof value === 'boolean' ? true : false\n}\n\nexport const validateLicenseNumber = (value) => {\n    let reg = /^[a-z0-9]{6}$/\n    return reg.test(value) || value === ''\n}\n","import React, { useReducer } from 'react'\nimport { Context, initialState, appReducer } from './reducer'\nimport Button from './components/Button'\nimport Table from './components/Table'\n\n\nfunction App() {\n\n  const [state, dispatch] = useReducer(appReducer, initialState)\n\n  // console.log(state)\n  return (\n    <Context.Provider value={{ state, dispatch }}>\n      <>\n        <Button />\n        <Table data={state.data} isRequiredParams={state.isRequiredParams} />\n      </>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // {/* </React.StrictMode>, */ }\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}